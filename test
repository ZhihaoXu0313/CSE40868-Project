#!/usr/bin/env python3
"""
Demonstration script comparing LayerGeometryLoader and VoxelGeometryLoader

This script shows how both loaders work with the same device_config.yaml but provide
different outputs:
- LayerGeometryLoader: Individual layer epsilon volumes for analysis
- VoxelGeometryLoader: Combined voxel grids for simulation
"""

from layer_geometry_loader import LayerGeometryLoader
from voxel_geometry_loader import VoxelGeometryLoader
import numpy as np


def demo_layer_geometry_loader():
    """Demonstrate LayerGeometryLoader capabilities."""
    print("\n=== LayerGeometryLoader Demo ===")
    
    # Initialize with debug output
    loader = LayerGeometryLoader(debug=True)
    
    # Load configurations
    if not loader.load_configurations():
        print("‚úó Failed to load configurations")
        return
    
    # Create layers at 600nm wavelength
    wavelength = 600.0
    print(f"\nüì° Creating layers at {wavelength} nm...")
    if not loader.create_all_layers(wavelength=wavelength):
        print("‚úó Failed to create layers")
        return
    
    # Show individual layer properties
    print(f"\nüìã Individual Layer Analysis:")
    for layer_id in loader.get_all_layer_names():
        metadata = loader.get_layer_metadata(layer_id)
        eps_volume = loader.get_layer(layer_id)
        
        print(f"\n  Layer: {layer_id}")
        print(f"    Material: {metadata['material']}")
        print(f"    Geometry: {metadata['geometry_type']}")
        print(f"    Thickness: {metadata['total_thickness']:.1f} nm")
        print(f"    Sublayers: {metadata['num_sublayers']}")
        print(f"    Epsilon: {metadata['material_eps']:.3f}")
        print(f"    Volume shape: {eps_volume.shape}")
        
        # Show material distribution in volume
        unique_eps = np.unique(np.round(np.real(eps_volume), 2))
        print(f"    Epsilon values in volume: {unique_eps}")
    
    # Create ordered stack
    print(f"\nüìö Ordered Stack Sequence:")
    ordered_stack = loader.create_ordered_stack()
    total_z = 0
    for i, layer in enumerate(ordered_stack):
        print(f"  {i+1}. {layer['layer_name']} ({layer['material']}) - "
              f"{layer['total_thickness']:.1f} nm @ z={total_z:.1f}-{total_z + layer['total_thickness']:.1f} nm")
        total_z += layer['total_thickness']
    
    # Stack summary
    print(f"\nüìä Stack Summary:")
    summary = loader.get_stack_summary()
    print(f"  Total thickness: {summary['actual_total_thickness']:.1f} nm")
    print(f"  Total sublayers: {summary['actual_total_sublayers']}")
    print(f"  Material distribution: {summary['material_distribution']}")
    print(f"  Geometry distribution: {summary['geometry_distribution']}")
    print(f"  Wavelength: {summary['wavelength']} nm")
    
    return loader


def demo_voxel_geometry_loader():
    """Demonstrate VoxelGeometryLoader capabilities."""
    print("\n=== VoxelGeometryLoader Demo ===")
    
    # Initialize 
    loader = VoxelGeometryLoader()
    
    # Load configurations
    if not loader.load_configurations():
        print("‚úó Failed to load configurations")
        return
    print("‚úì Configurations loaded")
    
    # Create layer stack at same wavelength
    wavelength = 600.0
    layer_stack = loader.create_layer_stack(wavelength=wavelength)
    print(f"‚úì Created layer stack with {len(layer_stack)} layers at {wavelength} nm")
    
    # Generate voxel grids
    grid_dims = (64, 64, 40)
    voxel_grid, epsilon_grid = loader.generate_voxel_grids(grid_dimensions=grid_dims)
    print(f"‚úì Generated voxel grids: {voxel_grid.shape}")
    
    # Show voxel grid properties
    print(f"\nüìê Voxel Grid Analysis:")
    print(f"  Grid dimensions: {voxel_grid.shape}")
    print(f"  Voxel values: {np.unique(voxel_grid)} (0=background, 1=material)")
    print(f"  Epsilon range (real): {np.min(np.real(epsilon_grid)):.2f} to {np.max(np.real(epsilon_grid)):.2f}")
    print(f"  Epsilon range (imag): {np.min(np.imag(epsilon_grid)):.2f} to {np.max(np.imag(epsilon_grid)):.2f}")
    
    # Show layer-by-layer information
    print(f"\nüìã Layer Stack Properties:")
    for i, layer in enumerate(layer_stack):
        print(f"  {i+1}. {layer['name']} ({layer['material_name']})")
        print(f"     Z-range: {layer['z_start']:.1f} - {layer['z_end']:.1f} nm")
        print(f"     Epsilon: {layer['epsilon']:.3f}")
        print(f"     Geometry: {layer['config'].geometry_type}")
    
    return loader


def compare_wavelength_dependence():
    """Compare wavelength-dependent material properties."""
    print("\n=== Wavelength Dependence Comparison ===")
    
    wavelengths = [400, 500, 600, 700, 800]  # nm
    
    # Use LayerGeometryLoader to analyze individual materials
    loader = LayerGeometryLoader(debug=False)
    if not loader.load_configurations():
        return
    
    print(f"\nüìà Material Properties vs Wavelength:")
    print(f"{'Wavelength':<12} {'Silicon':<20} {'Oxide':<20} {'Nitride':<20}")
    print("-" * 80)
    
    for wl in wavelengths:
        loader.create_all_layers(wavelength=wl)
        
        # Get epsilon values for each material
        materials_eps = {}
        for layer_id in loader.get_all_layer_names():
            metadata = loader.get_layer_metadata(layer_id)
            material = metadata['material']
            eps = metadata['material_eps']
            if material not in materials_eps:
                materials_eps[material] = eps
        
        # Format output
        si_eps = materials_eps.get('SILICON', 0)
        ox_eps = materials_eps.get('OXIDE', 0)
        ni_eps = materials_eps.get('NITRIDE', 0)
        
        print(f"{wl:<12.0f} {si_eps:<20.3f} {ox_eps:<20.3f} {ni_eps:<20.3f}")


def demo_layer_access_methods():
    """Demonstrate different ways to access layer data."""
    print("\n=== Layer Access Methods Demo ===")
    
    # Create loader and layers
    loader = LayerGeometryLoader(debug=False)
    loader.load_configurations()
    loader.create_all_layers(wavelength=550.0)
    
    # Method 1: Direct layer access
    print("\nüîç Method 1: Direct Layer Access")
    substrate_volume = loader.get_layer('substrate')
    print(f"  Substrate epsilon volume shape: {substrate_volume.shape}")
    print(f"  Substrate epsilon values: {np.unique(np.round(np.real(substrate_volume), 2))}")
    
    # Method 2: Metadata access
    print("\nüîç Method 2: Metadata Access")
    nitride_metadata = loader.get_layer_metadata('nitride_fin')
    print(f"  Nitride fin metadata keys: {list(nitride_metadata.keys())}")
    print(f"  Nitride fin geometry: {nitride_metadata['geometry_type']}")
    print(f"  Nitride fin dimensions: top_width={nitride_metadata['top_width']}, bottom_width={nitride_metadata['bottom_width']}")
    
    # Method 3: Ordered stack access
    print("\nüîç Method 3: Ordered Stack Access")
    ordered_stack = loader.create_ordered_stack()
    for layer in ordered_stack:
        if layer['geometry_type'] == 'halfcircle':
            print(f"  Found halfcircle layer: {layer['layer_name']}")
            print(f"    Radius: {layer['radius']} nm")
            print(f"    Sublayers: {layer['num_sublayers']}")
            break


def demo_data_persistence():
    """Demonstrate saving and loading layer data."""
    print("\n=== Data Persistence Demo ===")
    
    # Create and save layer data
    print("\nüíæ Saving layer data...")
    loader1 = LayerGeometryLoader(debug=False)
    loader1.load_configurations()
    loader1.create_all_layers(wavelength=450.0)  # Blue wavelength
    loader1.save_layer_data("test_layer_persistence.h5")
    
    original_layers = len(loader1.layers)
    original_wavelength = loader1.current_wavelength
    
    # Load layer data into new loader
    print("\nüìÇ Loading layer data...")
    loader2 = LayerGeometryLoader(debug=False)
    loader2.load_layer_data("test_layer_persistence.h5")
    
    # Compare
    loaded_layers = len(loader2.layers)
    loaded_wavelength = loader2.current_wavelength
    
    print(f"  Original layers: {original_layers}, Loaded layers: {loaded_layers}")
    print(f"  Original wavelength: {original_wavelength} nm, Loaded wavelength: {loaded_wavelength} nm")
    print(f"  Data integrity: {'‚úì PASS' if original_layers == loaded_layers and abs(original_wavelength - loaded_wavelength) < 0.1 else '‚úó FAIL'}")
    
    # Verify specific layer
    original_substrate = loader1.get_layer('substrate')
    loaded_substrate = loader2.get_layer('substrate')
    
    if original_substrate is not None and loaded_substrate is not None:
        arrays_match = np.allclose(original_substrate, loaded_substrate)
        print(f"  Substrate data integrity: {'‚úì PASS' if arrays_match else '‚úó FAIL'}")


def main():
    """Run all demonstration functions."""
    
    print("LayerGeometryLoader vs VoxelGeometryLoader Comparison")
    print("=" * 60)
    
    try:
        # Core functionality demos
        layer_loader = demo_layer_geometry_loader()
        voxel_loader = demo_voxel_geometry_loader()
        
        # Advanced features
        compare_wavelength_dependence()
        demo_layer_access_methods()
        demo_data_persistence()
        
        print("\n" + "=" * 60)
        print("‚úì All demos completed successfully!")
        print("\nüìã Summary:")
        print("  ‚Ä¢ LayerGeometryLoader: Ideal for analyzing individual layer properties")
        print("  ‚Ä¢ VoxelGeometryLoader: Ideal for creating simulation-ready voxel grids")
        print("  ‚Ä¢ Both use the same device_config.yaml for consistency")
        print("  ‚Ä¢ Both support wavelength-dependent material properties")
        print("  ‚Ä¢ Both provide data persistence and analysis capabilities")
        
    except Exception as e:
        print(f"\n‚úó Demo failed with error: {e}")
        import traceback
        traceback.print_exc()


if __name__ == "__main__":
    main()
